from bs4 import BeautifulSoup
import requests
import pickle
import threading
import re
import chompjs
from numpy import base_repr

#npcID: petID
#npcID is used on the webpage
#petID will be used by the addon
petID = {
    444: 1352,
    2671: 39,
    7380: 44,
    7381: 45,
    7382: 43,
    7383: 42,
    7384: 41,
    7385: 40,
    7386: 46,
    7387: 50,
    7389: 51,
    7390: 47,
    7391: 49,
    7394: 52,
    7395: 55,
    7543: 56,
    7544: 58,
    7545: 59,
    7546: 1563,
    7547: 57,
    7549: 65,
    7550: 64,
    7553: 68,
    7554: 69,
    7555: 67,
    7560: 72,
    7561: 74,
    7562: 77,
    7565: 75,
    7567: 78,
    8376: 83,
    9656: 85,
    9657: 86,
    9662: 87,
    10259: 89,
    10598: 90,
    11325: 92,
    11326: 93,
    11327: 94,
    12419: 95,
    14421: 70,
    14755: 757,
    14756: 758,
    14878: 106,
    15186: 107,
    15358: 111,
    15361: 1168,
    15429: 114,
    15698: 119,
    15699: 116,
    15705: 120,
    15706: 118,
    15710: 117,
    16069: 121,
    16085: 122,
    16445: 1073,
    16456: 124,
    16547: 125,
    16548: 126,
    16549: 127,
    16701: 128,
    17254: 1927,
    17255: 130,
    18381: 131,
    18839: 132,
    20408: 136,
    20472: 137,
    21008: 140,
    21009: 139,
    21010: 138,
    21018: 141,
    21055: 142,
    21056: 145,
    21063: 144,
    21064: 143,
    21076: 146,
    22445: 149,
    22943: 153,
    23198: 155,
    23231: 157,
    23234: 156,
    23258: 158,
    23266: 159,
    23274: 160,
    23909: 162,
    24388: 163,
    24389: 164,
    24480: 165,
    24753: 166,
    24968: 191,
    25062: 167,
    25109: 168,
    25110: 169,
    25146: 170,
    25147: 171,
    25706: 172,
    26050: 173,
    26056: 174,
    26119: 175,
    27217: 179,
    27346: 180,
    27914: 183,
    28470: 186,
    28513: 187,
    28883: 188,
    29089: 189,
    29147: 190,
    29726: 192,
    30379: 84,
    31575: 193,
    32589: 194,
    32590: 195,
    32591: 197,
    32592: 196,
    32595: 198,
    32643: 199,
    32791: 200,
    32818: 201,
    32841: 202,
    32939: 203,
    33188: 204,
    33194: 205,
    33197: 206,
    33198: 207,
    33200: 209,
    33205: 212,
    33219: 210,
    33226: 211,
    33227: 213,
    33238: 214,
    33239: 216,
    33274: 215,
    33529: 226,
    33530: 225,
    33578: 217,
    33810: 218,
    33975: 1943,
    34278: 220,
    34364: 224,
    34587: 227,
    34694: 228,
    34724: 229,
    34770: 1351,
    34930: 231,
    35387: 235,
    35394: 239,
    35395: 233,
    35396: 232,
    35397: 237,
    35398: 238,
    35399: 236,
    35400: 234,
    35468: 240,
    36482: 241,
    36511: 242,
    36607: 243,
    36871: 244,
    36908: 245,
    36909: 246,
    36910: 247,
    36911: 248,
    36979: 249,
    37865: 250,
    38374: 251,
    40198: 253,
    40295: 254,
    40624: 255,
    40703: 256,
    40721: 257,
    42078: 258,
    42177: 259,
    42183: 260,
    43800: 261,
    43916: 262,
    45128: 264,
    45247: 265,
    45340: 266,
    46896: 268,
    46898: 267,
    47944: 270,
    48107: 271,
    48242: 272,
    48609: 277,
    48641: 278,
    48982: 279,
    49586: 280,
    49587: 282,
    49588: 281,
    49590: 283,
    50468: 285,
    50545: 292,
    50586: 286,
    50722: 293,
    51090: 291,
    51122: 294,
    51600: 297,
    51601: 296,
    51632: 287,
    51635: 289,
    51649: 298,
    52226: 301,
    52343: 302,
    52344: 303,
    52831: 306,
    52894: 307,
    53048: 308,
    53225: 309,
    53232: 310,
    53283: 311,
    53623: 316,
    53658: 317,
    53661: 318,
    53884: 319,
    54027: 320,
    54128: 321,
    54227: 323,
    54374: 325,
    54383: 328,
    54438: 329,
    54487: 335,
    54491: 330,
    54539: 331,
    54541: 332,
    54730: 333,
    54745: 665,
    55187: 336,
    55215: 337,
    55356: 338,
    55367: 339,
    55386: 340,
    55571: 341,
    55574: 342,
    56031: 343,
    56082: 344,
    56083: 345,
    56266: 346,
    58163: 347,
    59020: 348,
    59358: 848,
    59702: 727,
    60649: 374,
    61071: 419,
    61080: 378,
    61081: 379,
    61086: 381,
    61087: 382,
    61088: 383,
    61089: 384,
    61141: 386,
    61142: 387,
    61143: 385,
    61158: 388,
    61160: 389,
    61165: 447,
    61167: 391,
    61168: 392,
    61169: 424,
    61170: 394,
    61171: 395,
    61253: 396,
    61255: 397,
    61257: 398,
    61258: 399,
    61259: 400,
    61312: 401,
    61313: 403,
    61314: 421,
    61317: 404,
    61318: 405,
    61319: 406,
    61320: 407,
    61321: 408,
    61322: 409,
    61323: 410,
    61324: 411,
    61325: 635,
    61326: 414,
    61327: 412,
    61328: 415,
    61329: 416,
    61366: 417,
    61367: 418,
    61368: 648,
    61369: 420,
    61370: 402,
    61372: 422,
    61375: 439,
    61383: 423,
    61384: 393,
    61385: 425,
    61386: 429,
    61420: 427,
    61425: 428,
    61438: 430,
    61439: 431,
    61440: 432,
    61441: 433,
    61443: 438,
    61456: 434,
    61459: 437,
    61677: 633,
    61686: 509,
    61689: 440,
    61690: 441,
    61691: 442,
    61703: 445,
    61704: 443,
    61718: 446,
    61750: 390,
    61751: 448,
    61752: 449,
    61753: 450,
    61755: 640,
    61757: 452,
    61758: 453,
    61826: 456,
    61827: 628,
    61828: 627,
    61829: 626,
    61830: 457,
    61877: 845,
    61883: 846,
    61889: 454,
    61890: 455,
    61892: 2,
    61905: 458,
    62019: 459,
    62020: 460,
    62022: 461,
    62034: 463,
    62035: 462,
    62050: 464,
    62051: 465,
    62114: 466,
    62115: 467,
    62116: 468,
    62117: 470,
    62118: 469,
    62119: 471,
    62120: 472,
    62121: 473,
    62127: 631,
    62129: 474,
    62130: 475,
    62163: 476,
    62176: 477,
    62177: 478,
    62178: 479,
    62181: 480,
    62182: 838,
    62184: 482,
    62185: 483,
    62186: 484,
    62187: 485,
    62188: 486,
    62189: 487,
    62190: 488,
    62191: 506,
    62201: 489,
    62242: 507,
    62246: 493,
    62250: 508,
    62255: 505,
    62256: 492,
    62257: 491,
    62258: 494,
    62312: 495,
    62313: 496,
    62314: 497,
    62315: 498,
    62316: 499,
    62317: 500,
    62364: 632,
    62370: 502,
    62373: 503,
    62375: 504,
    62395: 557,
    62434: 510,
    62435: 634,
    62523: 511,
    62524: 512,
    62526: 513,
    62555: 514,
    62564: 515,
    62583: 517,
    62620: 518,
    62621: 519,
    62625: 638,
    62626: 375,
    62627: 521,
    62628: 528,
    62638: 637,
    62640: 523,
    62641: 644,
    62648: 525,
    62664: 646,
    62669: 529,
    62693: 641,
    62695: 639,
    62697: 530,
    62815: 649,
    62816: 532,
    62818: 647,
    62819: 534,
    62820: 535,
    62829: 847,
    62835: 536,
    62852: 537,
    62854: 538,
    62864: 558,
    62884: 539,
    62885: 540,
    62886: 541,
    62887: 755,
    62888: 547,
    62892: 542,
    62893: 543,
    62894: 851,
    62895: 544,
    62896: 545,
    62899: 546,
    62900: 548,
    62904: 549,
    62905: 550,
    62906: 645,
    62907: 823,
    62914: 552,
    62915: 837,
    62916: 756,
    62921: 553,
    62922: 554,
    62924: 555,
    62925: 556,
    62927: 559,
    62953: 560,
    62954: 675,
    62991: 562,
    62992: 380,
    62994: 564,
    62997: 565,
    62998: 566,
    62999: 567,
    63001: 568,
    63002: 569,
    63003: 570,
    63004: 571,
    63005: 572,
    63006: 573,
    63057: 711,
    63060: 713,
    63062: 706,
    63064: 707,
    63094: 708,
    63095: 709,
    63096: 710,
    63097: 629,
    63098: 630,
    63288: 716,
    63291: 717,
    63293: 723,
    63304: 678,
    63358: 712,
    63365: 650,
    63370: 1042,
    63547: 726,
    63548: 745,
    63549: 733,
    63550: 724,
    63551: 725,
    63555: 731,
    63557: 729,
    63558: 730,
    63559: 652,
    63585: 728,
    63621: 821,
    63715: 699,
    63716: 703,
    63724: 666,
    63832: 671,
    63838: 748,
    63841: 749,
    63842: 750,
    63847: 751,
    63849: 752,
    63850: 747,
    63919: 702,
    63953: 680,
    63954: 739,
    63957: 740,
    64232: 820,
    64238: 744,
    64242: 742,
    64246: 677,
    64248: 679,
    64334: 873,
    64335: 872,
    64352: 743,
    64632: 835,
    64633: 836,
    64634: 834,
    64804: 741,
    64899: 844,
    65029: 705,
    65054: 714,
    65099: 715,
    65124: 718,
    65185: 722,
    65187: 732,
    65190: 737,
    65203: 746,
    65215: 753,
    65216: 754,
    65313: 802,
    65314: 792,
    65321: 819,
    65323: 817,
    65324: 818,
    65344: 800,
    65659: 874,
    65660: 875,
    65661: 876,
    65662: 880,
    65664: 881,
    65665: 882,
    65668: 877,
    65675: 886,
    65676: 887,
    65677: 885,
    65825: 825,
    65826: 826,
    65827: 829,
    65828: 830,
    65829: 824,
    65830: 827,
    65831: 828,
    65832: 832,
    65833: 831,
    65834: 833,
    66104: 849,
    66105: 850,
    66144: 889,
    66145: 890,
    66154: 891,
    66155: 892,
    66156: 893,
    66329: 894,
    66330: 895,
    66331: 896,
    66333: 897,
    66334: 898,
    66335: 899,
    66361: 904,
    66363: 905,
    66364: 906,
    66375: 900,
    66376: 901,
    66377: 902,
    66414: 924,
    66416: 925,
    66417: 926,
    66427: 907,
    66428: 908,
    66429: 909,
    66438: 911,
    66439: 912,
    66443: 921,
    66444: 922,
    66445: 923,
    66450: 856,
    66453: 915,
    66454: 916,
    66455: 917,
    66468: 927,
    66469: 928,
    66470: 929,
    66481: 931,
    66482: 932,
    66483: 933,
    66485: 934,
    66486: 935,
    66487: 936,
    66488: 937,
    66489: 938,
    66490: 939,
    66491: 855,
    66492: 941,
    66493: 942,
    66494: 943,
    66495: 944,
    66496: 945,
    66497: 946,
    66498: 947,
    66499: 948,
    66500: 949,
    66531: 950,
    66532: 951,
    66533: 952,
    66534: 953,
    66535: 954,
    66536: 955,
    66537: 956,
    66538: 957,
    66539: 958,
    66540: 959,
    66541: 960,
    66542: 961,
    66543: 962,
    66544: 963,
    66545: 964,
    66613: 965,
    66614: 966,
    66615: 967,
    66616: 968,
    66618: 969,
    66619: 970,
    66620: 971,
    66624: 974,
    66626: 975,
    66627: 976,
    66628: 977,
    66629: 978,
    66631: 979,
    66709: 992,
    66710: 993,
    66711: 994,
    66712: 998,
    66713: 999,
    66714: 1000,
    66715: 995,
    66716: 996,
    66718: 997,
    66719: 1001,
    66720: 1002,
    66721: 1003,
    66722: 1007,
    66723: 1008,
    66724: 1009,
    66725: 1010,
    66726: 1011,
    66728: 1012,
    66802: 983,
    66804: 984,
    66805: 985,
    66806: 980,
    66807: 981,
    66808: 982,
    66809: 986,
    66810: 987,
    66811: 988,
    66812: 989,
    66813: 990,
    66814: 991,
    66923: 1004,
    66925: 1005,
    66926: 1006,
    66930: 888,
    66950: 868,
    66964: 878,
    66965: 879,
    66966: 913,
    66982: 883,
    66983: 884,
    66984: 903,
    66996: 972,
    66997: 973,
    67022: 1013,
    67230: 1039,
    67233: 1040,
    67319: 1061,
    67329: 1062,
    67332: 1063,
    67382: 1066,
    67383: 1067,
    67384: 1065,
    67443: 1068,
    68267: 1117,
    68466: 1124,
    68467: 1125,
    68468: 1126,
    68502: 1127,
    68506: 1128,
    68555: 1129,
    68558: 1187,
    68559: 1188,
    68560: 1189,
    68561: 1190,
    68562: 1191,
    68563: 1192,
    68564: 1193,
    68565: 1194,
    68566: 1195,
    68567: 1130,
    68568: 1131,
    68569: 1132,
    68570: 1133,
    68571: 1136,
    68572: 1134,
    68573: 1137,
    68575: 1135,
    68577: 1138,
    68578: 1141,
    68579: 1140,
    68580: 1139,
    68601: 1142,
    68654: 1146,
    68655: 1145,
    68656: 1143,
    68657: 1144,
    68658: 1156,
    68659: 1155,
    68660: 1154,
    68661: 1151,
    68662: 1152,
    68663: 1153,
    68664: 1149,
    68665: 1147,
    68666: 1150,
    68804: 1157,
    68805: 1158,
    68806: 1159,
    68819: 1160,
    68820: 1161,
    68838: 1162,
    68839: 1163,
    68841: 1164,
    68845: 1165,
    68846: 1166,
    68850: 1167,
    69208: 1174,
    69648: 1175,
    69649: 1176,
    69748: 1177,
    69778: 1178,
    69794: 1179,
    69796: 1180,
    69818: 1181,
    69819: 1182,
    69820: 1183,
    69848: 1185,
    69849: 1184,
    69891: 1196,
    69892: 1198,
    69893: 1197,
    70082: 1204,
    70083: 1200,
    70098: 1201,
    70144: 1202,
    70154: 1205,
    70257: 1206,
    70258: 1207,
    70259: 1208,
    70260: 1209,
    70451: 1211,
    70452: 1212,
    70453: 1213,
    71014: 1226,
    71015: 1227,
    71016: 1228,
    71017: 1230,
    71018: 1231,
    71019: 1232,
    71020: 1233,
    71021: 1234,
    71022: 1235,
    71023: 1236,
    71033: 1229,
    71159: 1237,
    71163: 1238,
    71199: 1243,
    71200: 1244,
    71201: 1245,
    71438: 1247,
    71488: 1248,
    71655: 1255,
    71693: 1256,
    71700: 1257,
    71816: 1258,
    71844: 1259,
    71897: 1288,
    71898: 1286,
    71942: 1266,
    72009: 1267,
    72053: 1268,
    72054: 1269,
    72055: 1271,
    72097: 1287,
    72098: 1278,
    72099: 1279,
    72100: 1277,
    72101: 1282,
    72102: 1281,
    72103: 1280,
    72104: 1284,
    72105: 1283,
    72106: 1285,
    72107: 1291,
    72108: 1290,
    72109: 1289,
    72110: 1292,
    72111: 1293,
    72112: 1295,
    72113: 1296,
    72114: 1297,
    72115: 1298,
    72116: 1300,
    72117: 1301,
    72118: 1299,
    72160: 1276,
    72285: 1311,
    72290: 1319,
    72291: 1317,
    72462: 1303,
    72463: 1304,
    72464: 1305,
    73011: 1320,
    73350: 1331,
    73351: 1332,
    73352: 1322,
    73354: 1334,
    73355: 1333,
    73356: 1328,
    73357: 1335,
    73359: 1338,
    73364: 1330,
    73366: 1337,
    73367: 1336,
    73368: 1326,
    73532: 1329,
    73533: 1323,
    73534: 1321,
    73542: 1324,
    73543: 1325,
    73627: 1339,
    73668: 1343,
    73688: 1344,
    73730: 1345,
    73732: 1346,
    73738: 1348,
    73741: 1349,
    73809: 1350,
    73977: 1354,
    74402: 1363,
    74405: 1364,
    74413: 1365,
    76873: 1384,
    77021: 1385,
    77137: 1386,
    77221: 1387,
}

#zoneID: mapID
#zoneID is used on the webpage
#mapID will be used by the addon
petZones = {}

#load zoneID:mapID dictionary from file
with open("petZones.pkl", "rb") as f:
    loaded_dict = pickle.load(f)
    for zoneID, mapID in loaded_dict.items():
        petZones[zoneID] = mapID

petIdd = len(petID)

#the final dictionary with correct syntax
petLocationData = {}

#pets with items they can be taught by
# { npcId: [petId, itemId] }
petTaughtByItem = {}

#pets with missing location data and not taught by item
petMissingLocation = []

threads = []
counterProg = 0

#npc id blank url
mapurl = "https://mop-shoot.tauri.hu/?npc="

#attempt to extract pet coordinates
#return success state
def getPetLocationData(soup,pID,printArray):
    
    #we expect the element to be at index 13
    #start at 12 for unexpected difference
    for elemnt in soup[12:]:

        #get the script text data
        data = elemnt.text

        #check if the script contains location data
        if "g_mapperData" in data:
            
            #check if there are no coordinates
            if re.search(r"var g_mapperData = {}",data):
                printArray.append("fail <empty coords>")
                return False
            
            #dict to store individual pet loc data
            #zoneID:
            #   layerID:
            #       counts:
            #       coords:
            #           [
            #               [coordinatepair]
            #               [coordinatepair]
            #           ]
            petLocation = {}

            #get raw location data
            data = re.findall(r"({.*?)(?:;)", data)[0]

            #add location data to dict
            petLocation = chompjs.parse_js_object(data)

            #iterate all zones the pet is in
            for zoneID, zoneData in petLocation.items():
                #get the proper mapID (used in Addon) via zoneID (used on web)
                mapID = petZones[int(zoneID)]
                #check if the master dictionary already has an entry for the mapID
                #if it does, we cannot assign an empty sub dictionary to the mapID key
                if mapID in petLocationData:
                    petLocationData[mapID][pID] = {}
                else:
                    petLocationData[mapID] = { pID: {}}
                #iterate all layers of the map/zone the pet is in
                for layerID, layerData in zoneData.items():
                    #init an empty string for all the coordinates data
                    coordinatesData = ""
                    #iterate all coordinate arrays
                    for coordinateArray in layerData["coords"]:
                        #coordinates can be a float with up to 3 digits behind the comma
                        #we require a maximum of 1 digit behind the comma
                        #after *10 we trunc to remove unneeded info, then convert to int and turn the number into base 36
                        coordinatesData += base_repr(int(coordinateArray[0]*10),36) + base_repr(int(coordinateArray[1]*10),36)
                    #collected coordinate data gets saved to the specific layerID
                    petLocationData[mapID][pID][layerID] = coordinatesData

            #we found the location data
            printArray.append("success <location data>")
            return True
    
    #we did not find the location data
    printArray.append("no <location data>")
    return False

#attempt to extract if pet can be taught by item
#return success state
def getLearnedByItem(soup,pID,nID,printArray):

    #we expect the element to be at index 13 or 14
    #start at 12 for unexpected difference
    for elemnt in soup[12:]:

        data = elemnt.text
        #check if the script contains location data
        if "taught-by" in data:
            #get itemID
            itemID = int(re.findall(r"(?:new Listview\(\{template:'item',id:'taught-by'.*?id:)(\d*)(?:\}\]\}\)\;)", data)[0])
            petTaughtByItem[nID] = [pID,itemID]
            printArray.append("success <taught-by>: "+str(nID)+" - "+str(petTaughtByItem[nID]))
            return True
    printArray.append("no <taught-by>")
    return False

#fetch pet location data
def handlePetData(nID, pID):
    
    printArray = []

    #counter to visualize progress in command line when executed
    global counterProg
    counterProg += 1
    
    printArray.append(str(counterProg)+" / "+str(petIdd)+"\t\t"+str(nID)+"-"+str(pID))

    #if counterProg < 210:
    #    return

    #build the final npc id url
    url = mapurl + str(nID)
    #get webpage script data
    soup = BeautifulSoup(requests.get(url).text, "html.parser").find_all("script")

    #attempt to extract pet coordinates, store success
    petHasCoordinates = getPetLocationData(soup,pID,printArray)    
    
    #check if pet can be learned by an item
    petHasTaughtByItem = getLearnedByItem(soup,pID,nID,printArray)

    #if the pet has no location to catch and no item it can be learned by
    if not petHasCoordinates and not petHasTaughtByItem:
        petMissingLocation.append(nID)
        printArray.append("pet data missing")
    printArray.append("------------------------------------------------------")

    printString = ""

    for element in printArray:
        printString += element+"\n"
    print(printString)

#create a thread for each npcID we want to scrape
#for npcId, petId in testPets.items():
for npcId, petId in petID.items():
    t = threading.Thread(target=handlePetData,args=[npcId,petId])
    t.start()
    threads.append(t)

#join all threads together
for thread in threads:
    thread.join()
    
#for npcId, petId in testPets.items():
#for npcId, petId in petID.items():
#    handlePetData(npcId,petId)

#write entire pet location data dictionary to file
with open("petLocationData.pkl", "wb") as df:
    pickle.dump(petLocationData, df)

#write pet npcID (key) with [petID and itemID] (value) to file
# {npcID: [petID, itemID]}
with open("petTaughtByItem.pkl", "wb") as df:
    pickle.dump(petTaughtByItem, df)

#write pet npcID with (missing location) and (not taught by item) data to file
# [npcID]
with open("petMissingLocation.pkl", "wb") as df:
    pickle.dump(petMissingLocation, df)

